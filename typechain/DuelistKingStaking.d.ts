/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface DuelistKingStakingInterface extends ethers.utils.Interface {
  functions: {
    "addOperator(address)": FunctionFragment;
    "createNewStakingCampaign(tuple)": FunctionFragment;
    "getBlockTime()": FunctionFragment;
    "getCampaignInfo(uint256)": FunctionFragment;
    "getTotalPenaltyAmount(address)": FunctionFragment;
    "getUserStakingSlot(uint256,address)": FunctionFragment;
    "isOperator(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeOperator(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "staking(uint256,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unStaking(uint256)": FunctionFragment;
    "withdrawPenaltyToken(uint256,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addOperator", values: [string]): string;
  encodeFunctionData(
    functionFragment: "createNewStakingCampaign",
    values: [
      {
        startDate: BigNumberish;
        endDate: BigNumberish;
        rewardPhaseId: BigNumberish;
        returnRate: BigNumberish;
        maxAmountOfToken: BigNumberish;
        stakedAmountOfToken: BigNumberish;
        limitStakingAmountForUser: BigNumberish;
        tokenAddress: string;
        maxNumberOfBoxes: BigNumberish;
        totalReceivedBoxes: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaignInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPenaltyAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStakingSlot",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "isOperator", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeOperator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "staking",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unStaking",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPenaltyToken",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNewStakingCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaignInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPenaltyAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserStakingSlot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOperator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "staking", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unStaking", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPenaltyToken",
    data: BytesLike
  ): Result;

  events: {
    "AddOperator(address)": EventFragment;
    "ClaimReward(address,uint256,uint128,uint256,uint256,bool)": EventFragment;
    "NewCampaign(uint256,uint64,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RemoveOperator(address)": EventFragment;
    "Staking(uint256,address,uint256)": EventFragment;
    "Withdrawal(uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewCampaign"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staking"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawal"): EventFragment;
}

export class DuelistKingStaking extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: DuelistKingStakingInterface;

  functions: {
    addOperator(
      operator_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addOperator(address)"(
      operator_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createNewStakingCampaign(
      newCampaign: {
        startDate: BigNumberish;
        endDate: BigNumberish;
        rewardPhaseId: BigNumberish;
        returnRate: BigNumberish;
        maxAmountOfToken: BigNumberish;
        stakedAmountOfToken: BigNumberish;
        limitStakingAmountForUser: BigNumberish;
        tokenAddress: string;
        maxNumberOfBoxes: BigNumberish;
        totalReceivedBoxes: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createNewStakingCampaign((uint64,uint64,uint128,uint256,uint256,uint256,uint256,address,uint128,uint128))"(
      newCampaign: {
        startDate: BigNumberish;
        endDate: BigNumberish;
        rewardPhaseId: BigNumberish;
        returnRate: BigNumberish;
        maxAmountOfToken: BigNumberish;
        stakedAmountOfToken: BigNumberish;
        limitStakingAmountForUser: BigNumberish;
        tokenAddress: string;
        maxNumberOfBoxes: BigNumberish;
        totalReceivedBoxes: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getBlockTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getBlockTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCampaignInfo(
      campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          BigNumber
        ] & {
          startDate: BigNumber;
          endDate: BigNumber;
          rewardPhaseId: BigNumber;
          returnRate: BigNumber;
          maxAmountOfToken: BigNumber;
          stakedAmountOfToken: BigNumber;
          limitStakingAmountForUser: BigNumber;
          tokenAddress: string;
          maxNumberOfBoxes: BigNumber;
          totalReceivedBoxes: BigNumber;
        }
      ]
    >;

    "getCampaignInfo(uint256)"(
      campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          BigNumber
        ] & {
          startDate: BigNumber;
          endDate: BigNumber;
          rewardPhaseId: BigNumber;
          returnRate: BigNumber;
          maxAmountOfToken: BigNumber;
          stakedAmountOfToken: BigNumber;
          limitStakingAmountForUser: BigNumber;
          tokenAddress: string;
          maxNumberOfBoxes: BigNumber;
          totalReceivedBoxes: BigNumber;
        }
      ]
    >;

    getTotalPenaltyAmount(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getTotalPenaltyAmount(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserStakingSlot(
      campaignId: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          stakingAmountOfToken: BigNumber;
          stakedReward: BigNumber;
          startStakingDate: BigNumber;
          lastStakingDate: BigNumber;
        }
      ]
    >;

    "getUserStakingSlot(uint256,address)"(
      campaignId: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          stakingAmountOfToken: BigNumber;
          stakedReward: BigNumber;
          startStakingDate: BigNumber;
          lastStakingDate: BigNumber;
        }
      ]
    >;

    isOperator(
      operator_: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isOperator(address)"(
      operator_: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    removeOperator(
      operator_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeOperator(address)"(
      operator_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    staking(
      campaignId: BigNumberish,
      amountOfToken: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "staking(uint256,uint256)"(
      campaignId: BigNumberish,
      amountOfToken: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unStaking(
      campaignId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unStaking(uint256)"(
      campaignId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawPenaltyToken(
      campaignId: BigNumberish,
      beneficiary: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawPenaltyToken(uint256,address)"(
      campaignId: BigNumberish,
      beneficiary: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  addOperator(
    operator_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addOperator(address)"(
    operator_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createNewStakingCampaign(
    newCampaign: {
      startDate: BigNumberish;
      endDate: BigNumberish;
      rewardPhaseId: BigNumberish;
      returnRate: BigNumberish;
      maxAmountOfToken: BigNumberish;
      stakedAmountOfToken: BigNumberish;
      limitStakingAmountForUser: BigNumberish;
      tokenAddress: string;
      maxNumberOfBoxes: BigNumberish;
      totalReceivedBoxes: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createNewStakingCampaign((uint64,uint64,uint128,uint256,uint256,uint256,uint256,address,uint128,uint128))"(
    newCampaign: {
      startDate: BigNumberish;
      endDate: BigNumberish;
      rewardPhaseId: BigNumberish;
      returnRate: BigNumberish;
      maxAmountOfToken: BigNumberish;
      stakedAmountOfToken: BigNumberish;
      limitStakingAmountForUser: BigNumberish;
      tokenAddress: string;
      maxNumberOfBoxes: BigNumberish;
      totalReceivedBoxes: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getBlockTime(overrides?: CallOverrides): Promise<BigNumber>;

  "getBlockTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  getCampaignInfo(
    campaignId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      BigNumber
    ] & {
      startDate: BigNumber;
      endDate: BigNumber;
      rewardPhaseId: BigNumber;
      returnRate: BigNumber;
      maxAmountOfToken: BigNumber;
      stakedAmountOfToken: BigNumber;
      limitStakingAmountForUser: BigNumber;
      tokenAddress: string;
      maxNumberOfBoxes: BigNumber;
      totalReceivedBoxes: BigNumber;
    }
  >;

  "getCampaignInfo(uint256)"(
    campaignId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      BigNumber
    ] & {
      startDate: BigNumber;
      endDate: BigNumber;
      rewardPhaseId: BigNumber;
      returnRate: BigNumber;
      maxAmountOfToken: BigNumber;
      stakedAmountOfToken: BigNumber;
      limitStakingAmountForUser: BigNumber;
      tokenAddress: string;
      maxNumberOfBoxes: BigNumber;
      totalReceivedBoxes: BigNumber;
    }
  >;

  getTotalPenaltyAmount(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getTotalPenaltyAmount(address)"(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserStakingSlot(
    campaignId: BigNumberish,
    owner: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      stakingAmountOfToken: BigNumber;
      stakedReward: BigNumber;
      startStakingDate: BigNumber;
      lastStakingDate: BigNumber;
    }
  >;

  "getUserStakingSlot(uint256,address)"(
    campaignId: BigNumberish,
    owner: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      stakingAmountOfToken: BigNumber;
      stakedReward: BigNumber;
      startStakingDate: BigNumber;
      lastStakingDate: BigNumber;
    }
  >;

  isOperator(operator_: string, overrides?: CallOverrides): Promise<boolean>;

  "isOperator(address)"(
    operator_: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  removeOperator(
    operator_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeOperator(address)"(
    operator_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  staking(
    campaignId: BigNumberish,
    amountOfToken: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "staking(uint256,uint256)"(
    campaignId: BigNumberish,
    amountOfToken: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unStaking(
    campaignId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unStaking(uint256)"(
    campaignId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawPenaltyToken(
    campaignId: BigNumberish,
    beneficiary: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawPenaltyToken(uint256,address)"(
    campaignId: BigNumberish,
    beneficiary: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    addOperator(operator_: string, overrides?: CallOverrides): Promise<void>;

    "addOperator(address)"(
      operator_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createNewStakingCampaign(
      newCampaign: {
        startDate: BigNumberish;
        endDate: BigNumberish;
        rewardPhaseId: BigNumberish;
        returnRate: BigNumberish;
        maxAmountOfToken: BigNumberish;
        stakedAmountOfToken: BigNumberish;
        limitStakingAmountForUser: BigNumberish;
        tokenAddress: string;
        maxNumberOfBoxes: BigNumberish;
        totalReceivedBoxes: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<boolean>;

    "createNewStakingCampaign((uint64,uint64,uint128,uint256,uint256,uint256,uint256,address,uint128,uint128))"(
      newCampaign: {
        startDate: BigNumberish;
        endDate: BigNumberish;
        rewardPhaseId: BigNumberish;
        returnRate: BigNumberish;
        maxAmountOfToken: BigNumberish;
        stakedAmountOfToken: BigNumberish;
        limitStakingAmountForUser: BigNumberish;
        tokenAddress: string;
        maxNumberOfBoxes: BigNumberish;
        totalReceivedBoxes: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<boolean>;

    getBlockTime(overrides?: CallOverrides): Promise<BigNumber>;

    "getBlockTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCampaignInfo(
      campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber
      ] & {
        startDate: BigNumber;
        endDate: BigNumber;
        rewardPhaseId: BigNumber;
        returnRate: BigNumber;
        maxAmountOfToken: BigNumber;
        stakedAmountOfToken: BigNumber;
        limitStakingAmountForUser: BigNumber;
        tokenAddress: string;
        maxNumberOfBoxes: BigNumber;
        totalReceivedBoxes: BigNumber;
      }
    >;

    "getCampaignInfo(uint256)"(
      campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber
      ] & {
        startDate: BigNumber;
        endDate: BigNumber;
        rewardPhaseId: BigNumber;
        returnRate: BigNumber;
        maxAmountOfToken: BigNumber;
        stakedAmountOfToken: BigNumber;
        limitStakingAmountForUser: BigNumber;
        tokenAddress: string;
        maxNumberOfBoxes: BigNumber;
        totalReceivedBoxes: BigNumber;
      }
    >;

    getTotalPenaltyAmount(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalPenaltyAmount(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserStakingSlot(
      campaignId: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        stakingAmountOfToken: BigNumber;
        stakedReward: BigNumber;
        startStakingDate: BigNumber;
        lastStakingDate: BigNumber;
      }
    >;

    "getUserStakingSlot(uint256,address)"(
      campaignId: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        stakingAmountOfToken: BigNumber;
        stakedReward: BigNumber;
        startStakingDate: BigNumber;
        lastStakingDate: BigNumber;
      }
    >;

    isOperator(operator_: string, overrides?: CallOverrides): Promise<boolean>;

    "isOperator(address)"(
      operator_: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    removeOperator(operator_: string, overrides?: CallOverrides): Promise<void>;

    "removeOperator(address)"(
      operator_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    staking(
      campaignId: BigNumberish,
      amountOfToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "staking(uint256,uint256)"(
      campaignId: BigNumberish,
      amountOfToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unStaking(
      campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "unStaking(uint256)"(
      campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdrawPenaltyToken(
      campaignId: BigNumberish,
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "withdrawPenaltyToken(uint256,address)"(
      campaignId: BigNumberish,
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    AddOperator(
      operator: null
    ): TypedEventFilter<[string], { operator: string }>;

    ClaimReward(
      owner: string | null,
      numberOfBoxes: BigNumberish | null,
      rewardPhaseId: BigNumberish | null,
      campaignId: null,
      withdrawAmount: null,
      isPenalty: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, boolean],
      {
        owner: string;
        numberOfBoxes: BigNumber;
        rewardPhaseId: BigNumber;
        campaignId: BigNumber;
        withdrawAmount: BigNumber;
        isPenalty: boolean;
      }
    >;

    NewCampaign(
      campaignId: BigNumberish | null,
      startDate: BigNumberish | null,
      tokenAddress: string | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      { campaignId: BigNumber; startDate: BigNumber; tokenAddress: string }
    >;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    RemoveOperator(
      operator: null
    ): TypedEventFilter<[string], { operator: string }>;

    Staking(
      campaignId: BigNumberish | null,
      owner: string | null,
      amount: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { campaignId: BigNumber; owner: string; amount: BigNumber }
    >;

    Withdrawal(
      campaignId: BigNumberish | null,
      beneficiary: string | null,
      amount: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { campaignId: BigNumber; beneficiary: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    addOperator(operator_: string, overrides?: Overrides): Promise<BigNumber>;

    "addOperator(address)"(
      operator_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createNewStakingCampaign(
      newCampaign: {
        startDate: BigNumberish;
        endDate: BigNumberish;
        rewardPhaseId: BigNumberish;
        returnRate: BigNumberish;
        maxAmountOfToken: BigNumberish;
        stakedAmountOfToken: BigNumberish;
        limitStakingAmountForUser: BigNumberish;
        tokenAddress: string;
        maxNumberOfBoxes: BigNumberish;
        totalReceivedBoxes: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createNewStakingCampaign((uint64,uint64,uint128,uint256,uint256,uint256,uint256,address,uint128,uint128))"(
      newCampaign: {
        startDate: BigNumberish;
        endDate: BigNumberish;
        rewardPhaseId: BigNumberish;
        returnRate: BigNumberish;
        maxAmountOfToken: BigNumberish;
        stakedAmountOfToken: BigNumberish;
        limitStakingAmountForUser: BigNumberish;
        tokenAddress: string;
        maxNumberOfBoxes: BigNumberish;
        totalReceivedBoxes: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    getBlockTime(overrides?: CallOverrides): Promise<BigNumber>;

    "getBlockTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCampaignInfo(
      campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCampaignInfo(uint256)"(
      campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalPenaltyAmount(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalPenaltyAmount(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserStakingSlot(
      campaignId: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserStakingSlot(uint256,address)"(
      campaignId: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOperator(
      operator_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isOperator(address)"(
      operator_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeOperator(
      operator_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeOperator(address)"(
      operator_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    staking(
      campaignId: BigNumberish,
      amountOfToken: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "staking(uint256,uint256)"(
      campaignId: BigNumberish,
      amountOfToken: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unStaking(
      campaignId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "unStaking(uint256)"(
      campaignId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawPenaltyToken(
      campaignId: BigNumberish,
      beneficiary: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawPenaltyToken(uint256,address)"(
      campaignId: BigNumberish,
      beneficiary: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addOperator(
      operator_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addOperator(address)"(
      operator_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createNewStakingCampaign(
      newCampaign: {
        startDate: BigNumberish;
        endDate: BigNumberish;
        rewardPhaseId: BigNumberish;
        returnRate: BigNumberish;
        maxAmountOfToken: BigNumberish;
        stakedAmountOfToken: BigNumberish;
        limitStakingAmountForUser: BigNumberish;
        tokenAddress: string;
        maxNumberOfBoxes: BigNumberish;
        totalReceivedBoxes: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createNewStakingCampaign((uint64,uint64,uint128,uint256,uint256,uint256,uint256,address,uint128,uint128))"(
      newCampaign: {
        startDate: BigNumberish;
        endDate: BigNumberish;
        rewardPhaseId: BigNumberish;
        returnRate: BigNumberish;
        maxAmountOfToken: BigNumberish;
        stakedAmountOfToken: BigNumberish;
        limitStakingAmountForUser: BigNumberish;
        tokenAddress: string;
        maxNumberOfBoxes: BigNumberish;
        totalReceivedBoxes: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getBlockTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getBlockTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCampaignInfo(
      campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCampaignInfo(uint256)"(
      campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalPenaltyAmount(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalPenaltyAmount(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserStakingSlot(
      campaignId: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserStakingSlot(uint256,address)"(
      campaignId: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOperator(
      operator_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isOperator(address)"(
      operator_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeOperator(
      operator_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeOperator(address)"(
      operator_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    staking(
      campaignId: BigNumberish,
      amountOfToken: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "staking(uint256,uint256)"(
      campaignId: BigNumberish,
      amountOfToken: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unStaking(
      campaignId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unStaking(uint256)"(
      campaignId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawPenaltyToken(
      campaignId: BigNumberish,
      beneficiary: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawPenaltyToken(uint256,address)"(
      campaignId: BigNumberish,
      beneficiary: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
