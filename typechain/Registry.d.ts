/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface RegistryInterface extends ethers.utils.Interface {
  functions: {
    "batchSet(bytes32[],bytes32[],address[])": FunctionFragment;
    "getAddress(bytes32,bytes32)": FunctionFragment;
    "getDomainAndName(address)": FunctionFragment;
    "isExistRecord(bytes32,bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "set(bytes32,bytes32,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "batchSet",
    values: [BytesLike[], BytesLike[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAddress",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDomainAndName",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isExistRecord",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "set",
    values: [BytesLike, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "batchSet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDomainAndName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExistRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "RecordSet(bytes32,bytes32,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecordSet"): EventFragment;
}

export class Registry extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: RegistryInterface;

  functions: {
    batchSet(
      domains: BytesLike[],
      names: BytesLike[],
      addrs: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "batchSet(bytes32[],bytes32[],address[])"(
      domains: BytesLike[],
      names: BytesLike[],
      addrs: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getAddress(
      domain: BytesLike,
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getAddress(bytes32,bytes32)"(
      domain: BytesLike,
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getDomainAndName(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    "getDomainAndName(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    isExistRecord(
      domain: BytesLike,
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isExistRecord(bytes32,bytes32)"(
      domain: BytesLike,
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    set(
      domain: BytesLike,
      name: BytesLike,
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "set(bytes32,bytes32,address)"(
      domain: BytesLike,
      name: BytesLike,
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  batchSet(
    domains: BytesLike[],
    names: BytesLike[],
    addrs: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "batchSet(bytes32[],bytes32[],address[])"(
    domains: BytesLike[],
    names: BytesLike[],
    addrs: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getAddress(
    domain: BytesLike,
    name: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "getAddress(bytes32,bytes32)"(
    domain: BytesLike,
    name: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getDomainAndName(
    addr: string,
    overrides?: CallOverrides
  ): Promise<[string, string]>;

  "getDomainAndName(address)"(
    addr: string,
    overrides?: CallOverrides
  ): Promise<[string, string]>;

  isExistRecord(
    domain: BytesLike,
    name: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isExistRecord(bytes32,bytes32)"(
    domain: BytesLike,
    name: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  set(
    domain: BytesLike,
    name: BytesLike,
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "set(bytes32,bytes32,address)"(
    domain: BytesLike,
    name: BytesLike,
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    batchSet(
      domains: BytesLike[],
      names: BytesLike[],
      addrs: string[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "batchSet(bytes32[],bytes32[],address[])"(
      domains: BytesLike[],
      names: BytesLike[],
      addrs: string[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    getAddress(
      domain: BytesLike,
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "getAddress(bytes32,bytes32)"(
      domain: BytesLike,
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getDomainAndName(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    "getDomainAndName(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    isExistRecord(
      domain: BytesLike,
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isExistRecord(bytes32,bytes32)"(
      domain: BytesLike,
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    set(
      domain: BytesLike,
      name: BytesLike,
      addr: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "set(bytes32,bytes32,address)"(
      domain: BytesLike,
      name: BytesLike,
      addr: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    RecordSet(
      domain: null,
      name: BytesLike | null,
      addr: string | null
    ): TypedEventFilter<
      [string, string, string],
      { domain: string; name: string; addr: string }
    >;
  };

  estimateGas: {
    batchSet(
      domains: BytesLike[],
      names: BytesLike[],
      addrs: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "batchSet(bytes32[],bytes32[],address[])"(
      domains: BytesLike[],
      names: BytesLike[],
      addrs: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    getAddress(
      domain: BytesLike,
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAddress(bytes32,bytes32)"(
      domain: BytesLike,
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDomainAndName(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDomainAndName(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isExistRecord(
      domain: BytesLike,
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isExistRecord(bytes32,bytes32)"(
      domain: BytesLike,
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    set(
      domain: BytesLike,
      name: BytesLike,
      addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "set(bytes32,bytes32,address)"(
      domain: BytesLike,
      name: BytesLike,
      addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    batchSet(
      domains: BytesLike[],
      names: BytesLike[],
      addrs: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "batchSet(bytes32[],bytes32[],address[])"(
      domains: BytesLike[],
      names: BytesLike[],
      addrs: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getAddress(
      domain: BytesLike,
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAddress(bytes32,bytes32)"(
      domain: BytesLike,
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDomainAndName(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDomainAndName(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isExistRecord(
      domain: BytesLike,
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isExistRecord(bytes32,bytes32)"(
      domain: BytesLike,
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    set(
      domain: BytesLike,
      name: BytesLike,
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "set(bytes32,bytes32,address)"(
      domain: BytesLike,
      name: BytesLike,
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
