/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface DuelistKingDistributorInterface extends ethers.utils.Interface {
  functions: {
    "compute(bytes)": FunctionFragment;
    "getCampaign(uint256)": FunctionFragment;
    "getCampaignIndex()": FunctionFragment;
    "getDomain()": FunctionFragment;
    "getRegistry()": FunctionFragment;
    "issueGenesisEdittion(address,uint256)": FunctionFragment;
    "newCampaign(tuple)": FunctionFragment;
    "openBox(uint256,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "compute", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getCampaign",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaignIndex",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getDomain", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "issueGenesisEdittion",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "newCampaign",
    values: [
      {
        opened: BigNumberish;
        softCap: BigNumberish;
        deadline: BigNumberish;
        generation: BigNumberish;
        start: BigNumberish;
        end: BigNumberish;
        distribution: BigNumberish[];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "openBox",
    values: [BigNumberish, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "compute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaignIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDomain", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issueGenesisEdittion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "openBox", data: BytesLike): Result;

  events: {
    "NewCampaign(uint256,uint256,uint64)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewCampaign"): EventFragment;
}

export class DuelistKingDistributor extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: DuelistKingDistributorInterface;

  functions: {
    compute(
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "compute(bytes)"(
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getCampaign(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber[]
        ] & {
          opened: BigNumber;
          softCap: BigNumber;
          deadline: BigNumber;
          generation: BigNumber;
          start: BigNumber;
          end: BigNumber;
          distribution: BigNumber[];
        }
      ]
    >;

    "getCampaign(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber[]
        ] & {
          opened: BigNumber;
          softCap: BigNumber;
          deadline: BigNumber;
          generation: BigNumber;
          start: BigNumber;
          end: BigNumber;
          distribution: BigNumber[];
        }
      ]
    >;

    getCampaignIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getCampaignIndex()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDomain(overrides?: CallOverrides): Promise<[string]>;

    "getDomain()"(overrides?: CallOverrides): Promise<[string]>;

    getRegistry(overrides?: CallOverrides): Promise<[string]>;

    "getRegistry()"(overrides?: CallOverrides): Promise<[string]>;

    issueGenesisEdittion(
      owner: string,
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "issueGenesisEdittion(address,uint256)"(
      owner: string,
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    newCampaign(
      campaign: {
        opened: BigNumberish;
        softCap: BigNumberish;
        deadline: BigNumberish;
        generation: BigNumberish;
        start: BigNumberish;
        end: BigNumberish;
        distribution: BigNumberish[];
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "newCampaign((uint64,uint64,uint64,uint64,uint64,uint64,uint256[]))"(
      campaign: {
        opened: BigNumberish;
        softCap: BigNumberish;
        deadline: BigNumberish;
        generation: BigNumberish;
        start: BigNumberish;
        end: BigNumberish;
        distribution: BigNumberish[];
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    openBox(
      campaignId: BigNumberish,
      owner: string,
      numberOfBoxes: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "openBox(uint256,address,uint256)"(
      campaignId: BigNumberish,
      owner: string,
      numberOfBoxes: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  compute(data: BytesLike, overrides?: Overrides): Promise<ContractTransaction>;

  "compute(bytes)"(
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getCampaign(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber[]
    ] & {
      opened: BigNumber;
      softCap: BigNumber;
      deadline: BigNumber;
      generation: BigNumber;
      start: BigNumber;
      end: BigNumber;
      distribution: BigNumber[];
    }
  >;

  "getCampaign(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber[]
    ] & {
      opened: BigNumber;
      softCap: BigNumber;
      deadline: BigNumber;
      generation: BigNumber;
      start: BigNumber;
      end: BigNumber;
      distribution: BigNumber[];
    }
  >;

  getCampaignIndex(overrides?: CallOverrides): Promise<BigNumber>;

  "getCampaignIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

  getDomain(overrides?: CallOverrides): Promise<string>;

  "getDomain()"(overrides?: CallOverrides): Promise<string>;

  getRegistry(overrides?: CallOverrides): Promise<string>;

  "getRegistry()"(overrides?: CallOverrides): Promise<string>;

  issueGenesisEdittion(
    owner: string,
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "issueGenesisEdittion(address,uint256)"(
    owner: string,
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  newCampaign(
    campaign: {
      opened: BigNumberish;
      softCap: BigNumberish;
      deadline: BigNumberish;
      generation: BigNumberish;
      start: BigNumberish;
      end: BigNumberish;
      distribution: BigNumberish[];
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "newCampaign((uint64,uint64,uint64,uint64,uint64,uint64,uint256[]))"(
    campaign: {
      opened: BigNumberish;
      softCap: BigNumberish;
      deadline: BigNumberish;
      generation: BigNumberish;
      start: BigNumberish;
      end: BigNumberish;
      distribution: BigNumberish[];
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  openBox(
    campaignId: BigNumberish,
    owner: string,
    numberOfBoxes: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "openBox(uint256,address,uint256)"(
    campaignId: BigNumberish,
    owner: string,
    numberOfBoxes: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    compute(data: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    "compute(bytes)"(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getCampaign(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber[]
      ] & {
        opened: BigNumber;
        softCap: BigNumber;
        deadline: BigNumber;
        generation: BigNumber;
        start: BigNumber;
        end: BigNumber;
        distribution: BigNumber[];
      }
    >;

    "getCampaign(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber[]
      ] & {
        opened: BigNumber;
        softCap: BigNumber;
        deadline: BigNumber;
        generation: BigNumber;
        start: BigNumber;
        end: BigNumber;
        distribution: BigNumber[];
      }
    >;

    getCampaignIndex(overrides?: CallOverrides): Promise<BigNumber>;

    "getCampaignIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

    getDomain(overrides?: CallOverrides): Promise<string>;

    "getDomain()"(overrides?: CallOverrides): Promise<string>;

    getRegistry(overrides?: CallOverrides): Promise<string>;

    "getRegistry()"(overrides?: CallOverrides): Promise<string>;

    issueGenesisEdittion(
      owner: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "issueGenesisEdittion(address,uint256)"(
      owner: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    newCampaign(
      campaign: {
        opened: BigNumberish;
        softCap: BigNumberish;
        deadline: BigNumberish;
        generation: BigNumberish;
        start: BigNumberish;
        end: BigNumberish;
        distribution: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "newCampaign((uint64,uint64,uint64,uint64,uint64,uint64,uint256[]))"(
      campaign: {
        opened: BigNumberish;
        softCap: BigNumberish;
        deadline: BigNumberish;
        generation: BigNumberish;
        start: BigNumberish;
        end: BigNumberish;
        distribution: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openBox(
      campaignId: BigNumberish,
      owner: string,
      numberOfBoxes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "openBox(uint256,address,uint256)"(
      campaignId: BigNumberish,
      owner: string,
      numberOfBoxes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    NewCampaign(
      campaginId: BigNumberish | null,
      generation: BigNumberish | null,
      softcap: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { campaginId: BigNumber; generation: BigNumber; softcap: BigNumber }
    >;
  };

  estimateGas: {
    compute(data: BytesLike, overrides?: Overrides): Promise<BigNumber>;

    "compute(bytes)"(
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getCampaign(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCampaign(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCampaignIndex(overrides?: CallOverrides): Promise<BigNumber>;

    "getCampaignIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

    getDomain(overrides?: CallOverrides): Promise<BigNumber>;

    "getDomain()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    "getRegistry()"(overrides?: CallOverrides): Promise<BigNumber>;

    issueGenesisEdittion(
      owner: string,
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "issueGenesisEdittion(address,uint256)"(
      owner: string,
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    newCampaign(
      campaign: {
        opened: BigNumberish;
        softCap: BigNumberish;
        deadline: BigNumberish;
        generation: BigNumberish;
        start: BigNumberish;
        end: BigNumberish;
        distribution: BigNumberish[];
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "newCampaign((uint64,uint64,uint64,uint64,uint64,uint64,uint256[]))"(
      campaign: {
        opened: BigNumberish;
        softCap: BigNumberish;
        deadline: BigNumberish;
        generation: BigNumberish;
        start: BigNumberish;
        end: BigNumberish;
        distribution: BigNumberish[];
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    openBox(
      campaignId: BigNumberish,
      owner: string,
      numberOfBoxes: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "openBox(uint256,address,uint256)"(
      campaignId: BigNumberish,
      owner: string,
      numberOfBoxes: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    compute(
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "compute(bytes)"(
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getCampaign(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCampaign(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCampaignIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getCampaignIndex()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDomain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getDomain()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getRegistry()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    issueGenesisEdittion(
      owner: string,
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "issueGenesisEdittion(address,uint256)"(
      owner: string,
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    newCampaign(
      campaign: {
        opened: BigNumberish;
        softCap: BigNumberish;
        deadline: BigNumberish;
        generation: BigNumberish;
        start: BigNumberish;
        end: BigNumberish;
        distribution: BigNumberish[];
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "newCampaign((uint64,uint64,uint64,uint64,uint64,uint64,uint256[]))"(
      campaign: {
        opened: BigNumberish;
        softCap: BigNumberish;
        deadline: BigNumberish;
        generation: BigNumberish;
        start: BigNumberish;
        end: BigNumberish;
        distribution: BigNumberish[];
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    openBox(
      campaignId: BigNumberish,
      owner: string,
      numberOfBoxes: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "openBox(uint256,address,uint256)"(
      campaignId: BigNumberish,
      owner: string,
      numberOfBoxes: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
